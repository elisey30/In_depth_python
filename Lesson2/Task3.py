# Двоичное и восмеричное представление 

BASE = 2 

number = int(input('Введите число:  '))
print(bin(number))#выводится двоичное представление числа, полученное с помощью встроенной функции bin
result = '' #Инициализируется пустая строка для накопления результата.
while number >= BASE: #Цикл работает до тех пор, пока число больше 2
    result += str(number % BASE) #К строке result добавляется остаток от деления number на BASE (2), что соответствует текущему младшему биту числа в двоичном представлении.
    number //= BASE # Число делится нацело на основание системы счисления, что эквивалентно сдвигу вправо в двоичном представлении.
result += str(number) #После завершения цикла к результату добавляется самая старшая цифра (так как на последнем шаге number будет либо 1, либо 0).
print(result[:: -1]) #Поскольку в результате предыдущих шагов цифры записаны в обратном порядке (от младших к старшим), строка инвертируется с помощью среза [::-1] и выводится на экран.


BASE = 8 

number = int(input('Введите число:  '))
print(oct(number))#выводится восмиричное представление числа, полученное с помощью встроенной функции oct
result = '' #Инициализируется пустая строка для накопления результата.
while number >= BASE: #Цикл работает до тех пор, пока число больше 8
    result += str(number % BASE) #К строке result добавляется остаток от деления number на BASE (8), что соответствует текущему младшему биту числа в двоичном представлении.
    number //= BASE # Число делится нацело на основание системы счисления, что эквивалентно сдвигу вправо в двоичном представлении.
result += str(number) #После завершения цикла к результату добавляется самая старшая цифра (так как на последнем шаге number будет либо 1, либо 0).
print(result[:: -1]) #Поскольку в результате предыдущих шагов цифры записаны в обратном порядке (от младших к старшим), строка инвертируется с помощью среза [::-1] и выводится на экран.
